/*
Package main GENERATED BY gengo:runtimedoc
DON'T EDIT THIS FILE
*/
package main

// nolint:deadcode,unused
func runtimeDoc(v any, names ...string) ([]string, bool) {
	if c, ok := v.(interface {
		RuntimeDoc(names ...string) ([]string, bool)
	}); ok {
		return c.RuntimeDoc(names...)
	}
	return nil, false
}

func (v Agent) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Otel":
			return []string{}, true
		case "Metric":
			return []string{}, true
		case "Sign":
			return []string{}, true
		case "KubeClient":
			return []string{}, true
		case "Server":
			return []string{}, true
		case "AgentRegistry":
			return []string{}, true

		}
		if doc, ok := runtimeDoc(v.Otel, names...); ok {
			return doc, ok
		}
		if doc, ok := runtimeDoc(v.KubeClient, names...); ok {
			return doc, ok
		}
		if doc, ok := runtimeDoc(v.Server, names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{
		"Serve kubepkg agent",
	}, true
}

func (v Apply) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Logger":
			return []string{}, true
		case "Apply":
			return []string{}, true

		}
		if doc, ok := runtimeDoc(v.Logger, names...); ok {
			return doc, ok
		}
		if doc, ok := runtimeDoc(v.Apply, names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{
		"Apply manifests to k8s directly",
	}, true
}

func (v Dashboard) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Otel":
			return []string{}, true
		case "Metric":
			return []string{}, true
		case "Sign":
			return []string{}, true
		case "Auth":
			return []string{}, true
		case "AuthProviderOidc":
			return []string{}, true
		case "DB":
			return []string{}, true
		case "Server":
			return []string{}, true

		}
		if doc, ok := runtimeDoc(v.Otel, names...); ok {
			return doc, ok
		}
		if doc, ok := runtimeDoc(v.Server, names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{
		"Serve kubepkg dashboard",
	}, true
}

func (v Export) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Logger":
			return []string{}, true
		case "Exporter":
			return []string{}, true

		}
		if doc, ok := runtimeDoc(v.Logger, names...); ok {
			return doc, ok
		}
		if doc, ok := runtimeDoc(v.Exporter, names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{
		"Export kubepkg.tgz from kubepkg manifest",
	}, true
}

func (v Exporter) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "KubepkgJSON":
			return []string{}, true
		case "Storage":
			return []string{}, true
		case "RemoteRegistry":
			return []string{}, true
		case "ForceResolve":
			return []string{
				"Ignore image locked sha256 digest",
			}, true
		case "Output":
			return []string{
				"Output path for kubepkg.tgz",
			}, true
		case "Platform":
			return []string{
				"Supported platforms",
			}, true
		case "SinceKubepkgJSON":
			return []string{
				"For create patcher",
			}, true
		case "ManifestDumper":
			return []string{}, true

		}
		if doc, ok := runtimeDoc(v.ManifestDumper, names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{}, true
}

func (v JWTSigner) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "JWTSigner":
			return []string{}, true

		}
		if doc, ok := runtimeDoc(v.JWTSigner, names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{}, true
}

func (v ManifestDumper) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "OutputManifestsYaml":
			return []string{
				"output manifests yaml",
			}, true
		case "OutputDirExternalConfig":
			return []string{
				"output external ConfigMap DataFiles with annotation `config.kubepkg.octohelm.tech/type=external`",
			}, true

		}

		return nil, false
	}
	return []string{}, true
}

func (v Manifests) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "PrintManifests":
			return []string{}, true

		}
		if doc, ok := runtimeDoc(v.PrintManifests, names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{
		"Show manifests",
	}, true
}

func (v Operator) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Otel":
			return []string{}, true
		case "KubeClient":
			return []string{}, true
		case "Operator":
			return []string{}, true

		}
		if doc, ok := runtimeDoc(v.Otel, names...); ok {
			return doc, ok
		}
		if doc, ok := runtimeDoc(v.KubeClient, names...); ok {
			return doc, ok
		}
		if doc, ok := runtimeDoc(v.Operator, names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{
		"Serve Operator",
	}, true
}

func (v PrintManifests) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Namespace":
			return []string{}, true
		case "Output":
			return []string{}, true
		case "KubepkgJSON":
			return []string{}, true

		}

		return nil, false
	}
	return []string{}, true
}

func (v Registry) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Otel":
			return []string{}, true
		case "Server":
			return []string{}, true

		}
		if doc, ok := runtimeDoc(v.Otel, names...); ok {
			return doc, ok
		}
		if doc, ok := runtimeDoc(v.Server, names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{
		"Container Registry",
	}, true
}

func (v Upload) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Logger":
			return []string{}, true
		case "Uploader":
			return []string{}, true

		}
		if doc, ok := runtimeDoc(v.Logger, names...); ok {
			return doc, ok
		}
		if doc, ok := runtimeDoc(v.Uploader, names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{
		"Upload kubepkg.tgz to container registry",
	}, true
}

func (v Uploader) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "KubeTgzFile":
			return []string{}, true
		case "Registry":
			return []string{}, true
		case "KeepOriginHost":
			return []string{}, true
		case "Namespace":
			return []string{
				"Namespace Force overwrites Namespaces of resources",
			}, true
		case "ManifestDumper":
			return []string{}, true

		}
		if doc, ok := runtimeDoc(v.ManifestDumper, names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{}, true
}
