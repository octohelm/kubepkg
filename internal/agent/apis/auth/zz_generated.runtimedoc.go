/*
Package auth GENERATED BY gengo:runtimedoc 
DON'T EDIT THIS FILE
*/
package auth

// nolint:deadcode,unused
func runtimeDoc(v any, names ...string) ([]string, bool) {
	if c, ok := v.(interface {
		RuntimeDoc(names ...string) ([]string, bool)
	}); ok {
		return c.RuntimeDoc(names...)
	}
	return nil, false
}

func (v ExchangeToken) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "TokenExchanger":
			return []string{}, true

		}
		if doc, ok := runtimeDoc(v.TokenExchanger, names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{}, true
}

func (v ExchangeTokenAlias) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Authorization":
			return []string{}, true
		case "TokenExchanger":
			return []string{}, true

		}
		if doc, ok := runtimeDoc(v.TokenExchanger, names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{}, true
}

func (v Qrcode) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {

		}

		return nil, false
	}
	return []string{}, true
}

func (v TokenExchanger) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "ClientID":
			return []string{}, true
		case "GrantType":
			return []string{}, true
		case "RefreshToken":
			return []string{}, true
		case "Scope":
			return []string{}, true

		}

		return nil, false
	}
	return []string{}, true
}
