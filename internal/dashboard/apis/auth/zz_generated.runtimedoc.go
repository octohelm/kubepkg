/*
Package auth GENERATED BY gengo:runtimedoc
DON'T EDIT THIS FILE
*/
package auth

// nolint:deadcode,unused
func runtimeDoc(v any, names ...string) ([]string, bool) {
	if c, ok := v.(interface {
		RuntimeDoc(names ...string) ([]string, bool)
	}); ok {
		return c.RuntimeDoc(names...)
	}
	return nil, false
}

func (v Authorize) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "ProviderName":
			return []string{}, true
		case "State":
			return []string{}, true

		}

		return nil, false
	}
	return []string{}, true
}

func (v ExchangeToken) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "AuthProviderName":
			return []string{}, true
		case "ExchangeTokenData":
			return []string{}, true

		}
		if doc, ok := runtimeDoc(v.ExchangeTokenData, names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{}, true
}

func (v ExchangeTokenData) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Code":
			return []string{}, true

		}

		return nil, false
	}
	return []string{}, true
}

func (v ListAuthProvider) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {

		}

		return nil, false
	}
	return []string{}, true
}
