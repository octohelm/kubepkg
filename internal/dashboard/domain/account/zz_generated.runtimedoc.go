/*
Package account GENERATED BY gengo:runtimedoc
DON'T EDIT THIS FILE
*/
package account

// nolint:deadcode,unused
func runtimeDoc(v any, names ...string) ([]string, bool) {
	if c, ok := v.(interface {
		RuntimeDoc(names ...string) ([]string, bool)
	}); ok {
		return c.RuntimeDoc(names...)
	}
	return nil, false
}

func (v AccessToken) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "ID":
			return []string{}, true
		case "AccountID":
			return []string{}, true
		case "Desc":
			return []string{}, true
		case "CreationTime":
			return []string{}, true

		}
		if doc, ok := runtimeDoc(v.CreationTime, names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{}, true
}

func (v Account) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "AccountID":
			return []string{}, true
		case "AccountType":
			return []string{}, true
		case "PrimaryID":
			return []string{}, true
		case "CreationUpdationDeletionTime":
			return []string{}, true

		}
		if doc, ok := runtimeDoc(v.PrimaryID, names...); ok {
			return doc, ok
		}
		if doc, ok := runtimeDoc(v.CreationUpdationDeletionTime, names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{
		"Account",
	}, true
}

func (ID) RuntimeDoc(names ...string) ([]string, bool) {
	return []string{}, true
}
func (v Identity) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "AccountID":
			return []string{}, true
		case "IdentityType":
			return []string{}, true
		case "Identity":
			return []string{}, true
		case "PrimaryID":
			return []string{}, true
		case "CreationUpdationTime":
			return []string{}, true

		}
		if doc, ok := runtimeDoc(v.PrimaryID, names...); ok {
			return doc, ok
		}
		if doc, ok := runtimeDoc(v.CreationUpdationTime, names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{}, true
}

func (IdentityType) RuntimeDoc(names ...string) ([]string, bool) {
	return []string{}, true
}
func (v Robot) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Account":
			return []string{}, true
		case "RobotInfo":
			return []string{}, true

		}
		if doc, ok := runtimeDoc(v.Account, names...); ok {
			return doc, ok
		}
		if doc, ok := runtimeDoc(v.RobotInfo, names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{}, true
}

func (v RobotInfo) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Name":
			return []string{}, true

		}

		return nil, false
	}
	return []string{}, true
}

func (v RobotQueryParams) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "AccountIDs":
			return []string{}, true
		case "Identity":
			return []string{}, true
		case "Pager":
			return []string{}, true

		}
		if doc, ok := runtimeDoc(v.Pager, names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{}, true
}

func (Type) RuntimeDoc(names ...string) ([]string, bool) {
	return []string{}, true
}
func (v User) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Account":
			return []string{}, true
		case "UserInfo":
			return []string{}, true

		}
		if doc, ok := runtimeDoc(v.Account, names...); ok {
			return doc, ok
		}
		if doc, ok := runtimeDoc(v.UserInfo, names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{}, true
}

func (v UserDataList) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Data":
			return []string{}, true
		case "Total":
			return []string{}, true

		}

		return nil, false
	}
	return []string{}, true
}

func (v UserInfo) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Nickname":
			return []string{}, true
		case "Email":
			return []string{}, true
		case "Mobile":
			return []string{}, true

		}

		return nil, false
	}
	return []string{}, true
}

func (v UserQueryParams) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "AccountIDs":
			return []string{}, true
		case "Identity":
			return []string{}, true
		case "Pager":
			return []string{}, true

		}
		if doc, ok := runtimeDoc(v.Pager, names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{}, true
}

func (v VendorIdentity) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "AccountID":
			return []string{}, true
		case "VendorIdentityFrom":
			return []string{}, true
		case "VendorIdentity":
			return []string{}, true
		case "PrimaryID":
			return []string{}, true
		case "CreationUpdationTime":
			return []string{}, true

		}
		if doc, ok := runtimeDoc(v.PrimaryID, names...); ok {
			return doc, ok
		}
		if doc, ok := runtimeDoc(v.CreationUpdationTime, names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{}, true
}
