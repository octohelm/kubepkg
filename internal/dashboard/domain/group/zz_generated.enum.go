/*
Package group GENERATED BY gengo:enum
DON'T EDIT THIS FILE
*/
package group

import (
	bytes "bytes"
	database_sql_driver "database/sql/driver"

	github_com_octohelm_storage_pkg_enumeration "github.com/octohelm/storage/pkg/enumeration"
	github_com_pkg_errors "github.com/pkg/errors"
)

var InvalidEnvType = github_com_pkg_errors.New("invalid EnvType")

func (EnvType) EnumValues() []any {
	return []any{
		ENV_TYPE__DEV, ENV_TYPE__ONLINE,
	}
}
func (v EnvType) MarshalText() ([]byte, error) {
	str := v.String()
	if str == "UNKNOWN" {
		return nil, InvalidEnvType
	}
	return []byte(str), nil
}

func (v *EnvType) UnmarshalText(data []byte) error {
	vv, err := ParseEnvTypeFromString(string(bytes.ToUpper(data)))
	if err != nil {
		return err
	}
	*v = vv
	return nil
}

func ParseEnvTypeFromString(s string) (EnvType, error) {
	switch s {
	case "DEV":
		return ENV_TYPE__DEV, nil
	case "ONLINE":
		return ENV_TYPE__ONLINE, nil

	}
	return ENV_TYPE_UNKNOWN, InvalidEnvType
}

func (v EnvType) String() string {
	switch v {
	case ENV_TYPE__DEV:
		return "DEV"
	case ENV_TYPE__ONLINE:
		return "ONLINE"

	}
	return "UNKNOWN"
}

func ParseEnvTypeLabelString(label string) (EnvType, error) {
	switch label {
	case "开发环境":
		return ENV_TYPE__DEV, nil
	case "线上环境":
		return ENV_TYPE__ONLINE, nil

	}
	return ENV_TYPE_UNKNOWN, InvalidEnvType
}

func (v EnvType) Label() string {
	switch v {
	case ENV_TYPE__DEV:
		return "开发环境"
	case ENV_TYPE__ONLINE:
		return "线上环境"

	}
	return "UNKNOWN"
}

func (v EnvType) Value() (database_sql_driver.Value, error) {
	offset := 0
	if o, ok := any(v).(github_com_octohelm_storage_pkg_enumeration.DriverValueOffset); ok {
		offset = o.Offset()
	}
	return int64(v) + int64(offset), nil
}

func (v *EnvType) Scan(src any) error {
	offset := 0
	if o, ok := any(v).(github_com_octohelm_storage_pkg_enumeration.DriverValueOffset); ok {
		offset = o.Offset()
	}

	i, err := github_com_octohelm_storage_pkg_enumeration.ScanIntEnumStringer(src, offset)
	if err != nil {
		return err
	}
	*v = EnvType(i)
	return nil
}

var InvalidRoleType = github_com_pkg_errors.New("invalid RoleType")

func (RoleType) EnumValues() []any {
	return []any{
		ROLE_TYPE__OWNER, ROLE_TYPE__ADMIN, ROLE_TYPE__MEMBER, ROLE_TYPE__GUEST,
	}
}
func (v RoleType) MarshalText() ([]byte, error) {
	str := v.String()
	if str == "UNKNOWN" {
		return nil, InvalidRoleType
	}
	return []byte(str), nil
}

func (v *RoleType) UnmarshalText(data []byte) error {
	vv, err := ParseRoleTypeFromString(string(bytes.ToUpper(data)))
	if err != nil {
		return err
	}
	*v = vv
	return nil
}

func ParseRoleTypeFromString(s string) (RoleType, error) {
	switch s {
	case "OWNER":
		return ROLE_TYPE__OWNER, nil
	case "ADMIN":
		return ROLE_TYPE__ADMIN, nil
	case "MEMBER":
		return ROLE_TYPE__MEMBER, nil
	case "GUEST":
		return ROLE_TYPE__GUEST, nil

	}
	return ROLE_TYPE_UNKNOWN, InvalidRoleType
}

func (v RoleType) String() string {
	switch v {
	case ROLE_TYPE__OWNER:
		return "OWNER"
	case ROLE_TYPE__ADMIN:
		return "ADMIN"
	case ROLE_TYPE__MEMBER:
		return "MEMBER"
	case ROLE_TYPE__GUEST:
		return "GUEST"

	}
	return "UNKNOWN"
}

func ParseRoleTypeLabelString(label string) (RoleType, error) {
	switch label {
	case "拥有者":
		return ROLE_TYPE__OWNER, nil
	case "管理员":
		return ROLE_TYPE__ADMIN, nil
	case "成员":
		return ROLE_TYPE__MEMBER, nil
	case "访问者":
		return ROLE_TYPE__GUEST, nil

	}
	return ROLE_TYPE_UNKNOWN, InvalidRoleType
}

func (v RoleType) Label() string {
	switch v {
	case ROLE_TYPE__OWNER:
		return "拥有者"
	case ROLE_TYPE__ADMIN:
		return "管理员"
	case ROLE_TYPE__MEMBER:
		return "成员"
	case ROLE_TYPE__GUEST:
		return "访问者"

	}
	return "UNKNOWN"
}

func (v RoleType) Value() (database_sql_driver.Value, error) {
	offset := 0
	if o, ok := any(v).(github_com_octohelm_storage_pkg_enumeration.DriverValueOffset); ok {
		offset = o.Offset()
	}
	return int64(v) + int64(offset), nil
}

func (v *RoleType) Scan(src any) error {
	offset := 0
	if o, ok := any(v).(github_com_octohelm_storage_pkg_enumeration.DriverValueOffset); ok {
		offset = o.Offset()
	}

	i, err := github_com_octohelm_storage_pkg_enumeration.ScanIntEnumStringer(src, offset)
	if err != nil {
		return err
	}
	*v = RoleType(i)
	return nil
}
