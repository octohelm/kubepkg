/*
Package group GENERATED BY gengo:runtimedoc
DON'T EDIT THIS FILE
*/
package group

// nolint:deadcode,unused
func runtimeDoc(v any, names ...string) ([]string, bool) {
	if c, ok := v.(interface {
		RuntimeDoc(names ...string) ([]string, bool)
	}); ok {
		return c.RuntimeDoc(names...)
	}
	return nil, false
}

func (v Account) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "ID":
			return []string{}, true
		case "AccountID":
			return []string{
				"账户 ID",
			}, true
		case "GroupID":
			return []string{
				"组织 ID",
			}, true
		case "RoleType":
			return []string{
				"角色",
			}, true
		case "CreationUpdationTime":
			return []string{}, true

		}
		if doc, ok := runtimeDoc(v.CreationUpdationTime, names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{
		"",
	}, true
}

func (v Deployment) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "GroupEnvID":
			return []string{}, true
		case "DeploymentID":
			return []string{}, true
		case "DeploymentName":
			return []string{
				"DeploymentName default is EnvName of Kubepkg",
			}, true
		case "CreationUpdationTime":
			return []string{}, true
		case "KubepkgRel":
			return []string{}, true

		}
		if doc, ok := runtimeDoc(v.CreationUpdationTime, names...); ok {
			return doc, ok
		}
		if doc, ok := runtimeDoc(v.KubepkgRel, names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{}, true
}

func (v DeploymentDataList) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Data":
			return []string{}, true
		case "Total":
			return []string{}, true

		}

		return nil, false
	}
	return []string{}, true
}

func (v DeploymentHistory) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "DeploymentID":
			return []string{}, true
		case "DeploymentHistoryID":
			return []string{}, true
		case "KubepkgID":
			return []string{}, true
		case "KubepkgRevisionID":
			return []string{}, true
		case "DeploymentSettingID":
			return []string{}, true
		case "CreationTime":
			return []string{}, true

		}
		if doc, ok := runtimeDoc(v.CreationTime, names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{}, true
}

func (DeploymentHistoryID) RuntimeDoc(names ...string) ([]string, bool) {
	return []string{}, true
}
func (DeploymentID) RuntimeDoc(names ...string) ([]string, bool) {
	return []string{}, true
}
func (v DeploymentSetting) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "DeploymentSettingID":
			return []string{}, true
		case "DeploymentID":
			return []string{}, true
		case "Digest":
			return []string{}, true
		case "EncryptedSetting":
			return []string{}, true
		case "CreationTime":
			return []string{}, true

		}
		if doc, ok := runtimeDoc(v.CreationTime, names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{}, true
}

func (DeploymentSettingID) RuntimeDoc(names ...string) ([]string, bool) {
	return []string{}, true
}
func (v DeploymentWithKubePkg) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Deployment":
			return []string{}, true

		}
		if doc, ok := runtimeDoc(v.Deployment, names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{}, true
}

func (v Env) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "EnvID":
			return []string{}, true
		case "GroupID":
			return []string{
				"组织 ID",
			}, true
		case "EnvName":
			return []string{}, true
		case "EnvInfo":
			return []string{}, true
		case "EnvCluster":
			return []string{}, true
		case "RandPassword":
			return []string{}, true
		case "CreationUpdationDeletionTime":
			return []string{}, true

		}
		if doc, ok := runtimeDoc(v.EnvInfo, names...); ok {
			return doc, ok
		}
		if doc, ok := runtimeDoc(v.EnvCluster, names...); ok {
			return doc, ok
		}
		if doc, ok := runtimeDoc(v.CreationUpdationDeletionTime, names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{}, true
}

func (v EnvCluster) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "ClusterID":
			return []string{
				"关联集群",
			}, true
		case "Namespace":
			return []string{
				"对应 namespace",
				"<group>--<env-name>",
			}, true

		}

		return nil, false
	}
	return []string{}, true
}

func (EnvID) RuntimeDoc(names ...string) ([]string, bool) {
	return []string{}, true
}
func (v EnvInfo) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Desc":
			return []string{
				"环境描述",
			}, true
		case "EnvType":
			return []string{
				"环境类型",
			}, true

		}

		return nil, false
	}
	return []string{}, true
}

func (EnvType) RuntimeDoc(names ...string) ([]string, bool) {
	return []string{}, true
}
func (v EnvWithCluster) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Env":
			return []string{}, true
		case "Cluster":
			return []string{}, true

		}
		if doc, ok := runtimeDoc(v.Env, names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{}, true
}

func (v Group) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "ID":
			return []string{
				"组织 ID",
			}, true
		case "Name":
			return []string{
				"组织名称",
			}, true
		case "Info":
			return []string{}, true
		case "CreationUpdationDeletionTime":
			return []string{}, true

		}
		if doc, ok := runtimeDoc(v.Info, names...); ok {
			return doc, ok
		}
		if doc, ok := runtimeDoc(v.CreationUpdationDeletionTime, names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{
		"Group",
	}, true
}

func (ID) RuntimeDoc(names ...string) ([]string, bool) {
	return []string{}, true
}
func (v Info) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Type":
			return []string{
				"组织类型",
			}, true
		case "Desc":
			return []string{
				"组织描述",
			}, true

		}

		return nil, false
	}
	return []string{}, true
}

func (v KubepkgRel) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "KubepkgID":
			return []string{
				"KubepkgID which to  bind kubepkg",
			}, true
		case "KubepkgChannel":
			return []string{}, true

		}

		return nil, false
	}
	return []string{}, true
}

func (v Robot) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Account":
			return []string{}, true
		case "RobotInfo":
			return []string{}, true

		}
		if doc, ok := runtimeDoc(v.Account, names...); ok {
			return doc, ok
		}
		if doc, ok := runtimeDoc(v.RobotInfo, names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{}, true
}

func (v RobotDataList) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Data":
			return []string{}, true
		case "Total":
			return []string{}, true

		}

		return nil, false
	}
	return []string{}, true
}

func (v RobotQueryParams) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "RobotQueryParams":
			return []string{}, true
		case "RoleType":
			return []string{}, true

		}
		if doc, ok := runtimeDoc(v.RobotQueryParams, names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{}, true
}

func (v RoleInfo) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "RoleType":
			return []string{}, true

		}

		return nil, false
	}
	return []string{}, true
}

func (RoleType) RuntimeDoc(names ...string) ([]string, bool) {
	return []string{}, true
}
func (Type) RuntimeDoc(names ...string) ([]string, bool) {
	return []string{}, true
}
func (v User) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Account":
			return []string{}, true
		case "UserInfo":
			return []string{}, true

		}
		if doc, ok := runtimeDoc(v.Account, names...); ok {
			return doc, ok
		}
		if doc, ok := runtimeDoc(v.UserInfo, names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{}, true
}

func (v UserDataList) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Data":
			return []string{}, true
		case "Total":
			return []string{}, true

		}

		return nil, false
	}
	return []string{}, true
}

func (v UserQueryParams) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "UserQueryParams":
			return []string{}, true
		case "RoleType":
			return []string{}, true

		}
		if doc, ok := runtimeDoc(v.UserQueryParams, names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{}, true
}
