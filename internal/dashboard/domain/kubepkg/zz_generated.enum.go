/*
Package kubepkg GENERATED BY gengo:enum
DON'T EDIT THIS FILE
*/
package kubepkg

import (
	bytes "bytes"
	database_sql_driver "database/sql/driver"

	github_com_octohelm_storage_pkg_enumeration "github.com/octohelm/storage/pkg/enumeration"
	github_com_pkg_errors "github.com/pkg/errors"
)

var InvalidChannel = github_com_pkg_errors.New("invalid Channel")

func (Channel) EnumValues() []any {
	return []any{
		CHANNEL__DEV, CHANNEL__BETA, CHANNEL__RC, CHANNEL__STABLE,
	}
}
func (v Channel) MarshalText() ([]byte, error) {
	str := v.String()
	if str == "UNKNOWN" {
		return nil, InvalidChannel
	}
	return []byte(str), nil
}

func (v *Channel) UnmarshalText(data []byte) error {
	vv, err := ParseChannelFromString(string(bytes.ToUpper(data)))
	if err != nil {
		return err
	}
	*v = vv
	return nil
}

func ParseChannelFromString(s string) (Channel, error) {
	switch s {
	case "DEV":
		return CHANNEL__DEV, nil
	case "BETA":
		return CHANNEL__BETA, nil
	case "RC":
		return CHANNEL__RC, nil
	case "STABLE":
		return CHANNEL__STABLE, nil

	}
	return CHANNEL_UNKNOWN, InvalidChannel
}

func (v Channel) String() string {
	switch v {
	case CHANNEL__DEV:
		return "DEV"
	case CHANNEL__BETA:
		return "BETA"
	case CHANNEL__RC:
		return "RC"
	case CHANNEL__STABLE:
		return "STABLE"

	}
	return "UNKNOWN"
}

func ParseChannelLabelString(label string) (Channel, error) {
	switch label {
	case "开发":
		return CHANNEL__DEV, nil
	case "测试":
		return CHANNEL__BETA, nil
	case "预览":
		return CHANNEL__RC, nil
	case "线上":
		return CHANNEL__STABLE, nil

	}
	return CHANNEL_UNKNOWN, InvalidChannel
}

func (v Channel) Label() string {
	switch v {
	case CHANNEL__DEV:
		return "开发"
	case CHANNEL__BETA:
		return "测试"
	case CHANNEL__RC:
		return "预览"
	case CHANNEL__STABLE:
		return "线上"

	}
	return "UNKNOWN"
}

func (v Channel) Value() (database_sql_driver.Value, error) {
	offset := 0
	if o, ok := any(v).(github_com_octohelm_storage_pkg_enumeration.DriverValueOffset); ok {
		offset = o.Offset()
	}
	return int64(v) + int64(offset), nil
}

func (v *Channel) Scan(src any) error {
	offset := 0
	if o, ok := any(v).(github_com_octohelm_storage_pkg_enumeration.DriverValueOffset); ok {
		offset = o.Offset()
	}

	i, err := github_com_octohelm_storage_pkg_enumeration.ScanIntEnumStringer(src, offset)
	if err != nil {
		return err
	}
	*v = Channel(i)
	return nil
}
