/*
Package kubepkg GENERATED BY gengo:runtimedoc
DON'T EDIT THIS FILE
*/
package kubepkg

// nolint:deadcode,unused
func runtimeDoc(v any, names ...string) ([]string, bool) {
	if c, ok := v.(interface {
		RuntimeDoc(names ...string) ([]string, bool)
	}); ok {
		return c.RuntimeDoc(names...)
	}
	return nil, false
}

func (Channel) RuntimeDoc(names ...string) ([]string, bool) {
	return []string{}, true
}
func (ID) RuntimeDoc(names ...string) ([]string, bool) {
	return []string{}, true
}
func (v Kubepkg) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "ID":
			return []string{
				"Kubepkg ID",
			}, true
		case "Group":
			return []string{
				"Kubepkg Group",
			}, true
		case "Name":
			return []string{
				"Kubepkg 名称",
			}, true
		case "CreationUpdationDeletionTime":
			return []string{}, true

		}
		if doc, ok := runtimeDoc(v.CreationUpdationDeletionTime, names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{}, true
}

func (v Ref) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "KubepkgID":
			return []string{}, true
		case "KubepkgRevisionID":
			return []string{}, true
		case "SettingID":
			return []string{}, true

		}

		return nil, false
	}
	return []string{}, true
}

func (v Revision) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "ID":
			return []string{
				"Kubepkg Revision ID",
			}, true
		case "KubepkgID":
			return []string{}, true
		case "Digest":
			return []string{
				"hash of manifest",
			}, true
		case "Manifests":
			return []string{
				"manifests",
			}, true
		case "CreationTime":
			return []string{}, true

		}
		if doc, ok := runtimeDoc(v.CreationTime, names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{}, true
}

func (RevisionID) RuntimeDoc(names ...string) ([]string, bool) {
	return []string{}, true
}
func (v Version) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "ID":
			return []string{}, true
		case "Channel":
			return []string{
				"版本分支",
			}, true
		case "Version":
			return []string{
				"版本号",
			}, true
		case "RevisionID":
			return []string{}, true
		case "CreationTime":
			return []string{}, true

		}
		if doc, ok := runtimeDoc(v.CreationTime, names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{}, true
}
