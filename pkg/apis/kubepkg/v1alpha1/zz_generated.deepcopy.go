/*
Package v1alpha1 GENERATED BY gengo:deepcopy
DON'T EDIT THIS FILE
*/
package v1alpha1

import (
	k8s_io_apimachinery_pkg_runtime "k8s.io/apimachinery/pkg/runtime"
)

func (in *KubePkg) DeepCopyObject() k8s_io_apimachinery_pkg_runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

func (in *KubePkg) DeepCopy() *KubePkg {
	if in == nil {
		return nil
	}
	out := new(KubePkg)
	in.DeepCopyInto(out)
	return out
}

func (in *KubePkg) DeepCopyInto(out *KubePkg) {
	out.TypeMeta = in.TypeMeta
	out.ObjectMeta = *in.ObjectMeta.DeepCopy()
	in.Spec.DeepCopyInto(&out.Spec)
	out.Status = in.Status

}
func (in *Spec) DeepCopy() *Spec {
	if in == nil {
		return nil
	}
	out := new(Spec)
	in.DeepCopyInto(out)
	return out
}

func (in *Spec) DeepCopyInto(out *Spec) {
	out.Version = in.Version
	in.Deploy.DeepCopyInto(&out.Deploy)
	if in.Config != nil {
		i, o := &in.Config, &out.Config
		*o = make(map[string]EnvVarValueOrFrom, len(*i))
		for key, val := range *i {
			(*o)[key] = val
		}
	}
	if in.Containers != nil {
		i, o := &in.Containers, &out.Containers
		*o = make(map[string]Container, len(*i))
		for key, val := range *i {
			(*o)[key] = val
		}
	}
	if in.Volumes != nil {
		i, o := &in.Volumes, &out.Volumes
		*o = make(map[string]Volume, len(*i))
		for key, val := range *i {
			(*o)[key] = val
		}
	}
	if in.Services != nil {
		i, o := &in.Services, &out.Services
		*o = make(map[string]Service, len(*i))
		for key, val := range *i {
			(*o)[key] = val
		}
	}
	out.ServiceAccount = in.ServiceAccount
	out.Manifests = in.Manifests.DeepCopy()

}
func (in *Deploy) DeepCopy() *Deploy {
	if in == nil {
		return nil
	}
	out := new(Deploy)
	in.DeepCopyInto(out)
	return out
}

func (in *Deploy) DeepCopyInto(out *Deploy) {
	out.Deployer = in.Deployer

}
func (in Manifests) DeepCopy() Manifests {
	if in == nil {
		return nil
	}
	out := make(Manifests)
	in.DeepCopyInto(out)
	return out
}

func (in Manifests) DeepCopyInto(out Manifests) {
	for k := range in {
		out[k] = in[k]
	}
}

func (in *KubePkgList) DeepCopyObject() k8s_io_apimachinery_pkg_runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

func (in *KubePkgList) DeepCopy() *KubePkgList {
	if in == nil {
		return nil
	}
	out := new(KubePkgList)
	in.DeepCopyInto(out)
	return out
}

func (in *KubePkgList) DeepCopyInto(out *KubePkgList) {
	out.TypeMeta = in.TypeMeta
	out.ListMeta = *in.ListMeta.DeepCopy()
	if in.Items != nil {
		i, o := &in.Items, &out.Items
		*o = make([]KubePkg, len(*i))
		copy(*o, *i)
	}

}
