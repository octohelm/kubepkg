/*
Package v1alpha1 GENERATED BY gengo:runtimedoc
DON'T EDIT THIS FILE
*/
package v1alpha1

// nolint:deadcode,unused
func runtimeDoc(v any, names ...string) ([]string, bool) {
	if c, ok := v.(interface {
		RuntimeDoc(names ...string) ([]string, bool)
	}); ok {
		return c.RuntimeDoc(names...)
	}
	return nil, false
}

func (v DigestMeta) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Type":
			return []string{}, true
		case "Digest":
			return []string{}, true
		case "Name":
			return []string{}, true
		case "Size":
			return []string{}, true
		case "Tag":
			return []string{}, true
		case "Platform":
			return []string{}, true

		}

		return nil, false
	}
	return []string{}, true
}

func (DigestMetaType) RuntimeDoc(names ...string) ([]string, bool) {
	return []string{}, true
}
func (FileSize) RuntimeDoc(names ...string) ([]string, bool) {
	return []string{}, true
}
func (v KubePkg) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "TypeMeta":
			return []string{}, true
		case "ObjectMeta":
			return []string{}, true
		case "Spec":
			return []string{}, true
		case "Status":
			return []string{}, true

		}
		if doc, ok := runtimeDoc(v.TypeMeta, names...); ok {
			return doc, ok
		}
		if doc, ok := runtimeDoc(v.ObjectMeta, names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{
		"KubePkg",
	}, true
}

func (v KubePkgList) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "TypeMeta":
			return []string{}, true
		case "ListMeta":
			return []string{}, true
		case "Items":
			return []string{}, true

		}
		if doc, ok := runtimeDoc(v.TypeMeta, names...); ok {
			return doc, ok
		}
		if doc, ok := runtimeDoc(v.ListMeta, names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{
		"KubePkgList",
	}, true
}

func (v KubePkgSpec) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Version":
			return []string{}, true
		case "Images":
			return []string{}, true
		case "Manifests":
			return []string{}, true

		}

		return nil, false
	}
	return []string{}, true
}

func (v KubePkgStatus) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Statuses":
			return []string{}, true
		case "Digests":
			return []string{}, true

		}

		return nil, false
	}
	return []string{}, true
}

func (Manifests) RuntimeDoc(names ...string) ([]string, bool) {
	return []string{}, true
}
func (Statuses) RuntimeDoc(names ...string) ([]string, bool) {
	return []string{}, true
}
