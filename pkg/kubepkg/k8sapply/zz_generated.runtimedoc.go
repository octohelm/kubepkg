/*
Package k8sapply GENERATED BY gengo:runtimedoc 
DON'T EDIT THIS FILE
*/
package k8sapply

// nolint:deadcode,unused
func runtimeDoc(v any, names ...string) ([]string, bool) {
	if c, ok := v.(interface {
		RuntimeDoc(names ...string) ([]string, bool)
	}); ok {
		return c.RuntimeDoc(names...)
	}
	return nil, false
}

func (v Apply) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "KubepkgJSON":
			return []string{
				"KubePkg or KubePkgList json file",
			}, true
		case "Kubeconfig":
			return []string{
				"Paths to a kubeconfig. Only required if out-of-cluster.\"",
			}, true
		case "DryRun":
			return []string{
				"Enable dry run",
			}, true
		case "Force":
			return []string{
				"overwrites ownership",
			}, true
		case "CreateNamespace":
			return []string{
				"Create namespace if not exists",
			}, true

		}

		return nil, false
	}
	return []string{}, true
}
